apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{.Values.pg.container.name.primary}}"
  labels:
    name: "{{.Values.pg.container.name.replica}}"
    app: "{{.Values.pg.container.name.primary}}"
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
spec:
  selector:
    matchLabels:
      app: "{{.Values.pg.container.name.primary}}"
  serviceName: "{{.Values.pg.container.name.primary}}"
  replicas: 2
  template:
    metadata:
      labels:
        app: "{{.Values.pg.container.name.primary}}"
    spec:
      serviceAccount: "{{.Values.pg.container.serviceAccount}}"
      terminationGracePeriodSeconds: 10
      containers:
      - name: {{.Values.pg.container.name.primary}}
        image: "{{.Values.pg.image.repository}}/{{.Values.pg.image.container}}:{{.Values.pg.image.tag}}"
        ports:
        - containerPort: {{.Values.pg.container.port}}
          name: postgres
        env:
        - name: PGHOST
          value: /tmp
        - name: PG_PRIMARY_USER
          value: primaryuser
        - name: PG_MODE
          value: set
        - name: PG_PRIMARY_HOST
          value: "{{.Values.pg.container.name.primary}}"
        - name: PG_PRIMARY_PORT
          value: "{{.Values.pg.container.port}}"
        - name: PG_PRIMARY_PASSWORD
          value: "{{.Values.pg.credentials.primary}}"
        - name: PG_USER
          value: "{{.Values.pg.credentials.pgUser}}"
        - name: PG_PASSWORD
          value: "{{.Values.pg.credentials.pgPassword}}"
        - name: PG_DATABASE
          value: "{{.Values.flask.config.database}}"
        - name: PG_ROOT_PASSWORD
          value: "{{.Values.pg.credentials.root}}"
        resources:
          requests:
            cpu: {{ .Values.pg.resources.cpu }}
            memory: {{ .Values.pg.resources.memory }}
        volumeMounts:
        - mountPath: /pgdata
          name: pgdata
        - mountPath: /backup
          name: backup
          readOnly: true
      volumes:
      - emptyDir: {}
        name: pgdata
      - emptyDir: {}
        name: backup
